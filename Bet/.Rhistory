}
points_df <- data.frame(game_times,NA,NA,NA)
colnames(points_df) <- c("GameTime","Points","PointsInMinute","Line")
for(ii in 1:nrow(points_df)){
per <- strsplit(as.character(points_df$GameTime[ii])," - ")[[1]][1]
min <-  as.character(as.numeric(gsub("m","",strsplit(as.character(points_df$GameTime)[ii]," - ")[[1]][2]))-1)
if(length(intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))) > 0){
points_ii <- game_data$Points[intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))]
line_ii <- game_data$Line[intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))]
} else{
points_ii <- NA
line_ii <- NA
}
points_df$Points[ii] <- max(points_ii)
points_df$Line[ii] <- max(line_ii)
}
points_in_minute <- c()
for(pp in 1:nrow(points_df)){
points_in_minute[pp] <- points_df$Points[pp] - points_df$Points[pp-1]
}
points_df$PointsInMinute <- points_in_minute
}
}
if(nrow(game_data != 0)){
points_df_na <- points_df
} else{
points_df <- game_data
points_df_na <- game_data
}
if(any(is.na(game_data$Points))){
n_na <- length(which(is.na(game_data$Points)))
game_data <- game_data[-which(is.na(game_data$Points)),]
}
curr_line <- game_data$Line[nrow(game_data)]
curr_points <- game_data$Points[nrow(game_data)]
curr_gametime <- game_data$GameTime[nrow(game_data)]
if(nrow(game_data) > 0){
if((length(curr_gametime) == 0 || is.na(curr_gametime)) || (length(curr_points) == 0 || is.na(curr_points)) || (length(curr_line) ==0 || is.na(curr_gametime))){
curr_line <- "NA"
curr_points <- "NA"
curr_gametime <- "NA"
time.left <- "NA"
mins.left <- "NA"
max.points <- "NA"
curr_ppm <- "NA"
total_at_curr <- "NA"
req_rate <- "NA"
curr_variance <- "NA"
ave_line <- "NA"
} else{
if(game_data$Type[1] == 'NCAA'){
mins.left <- strsplit(strsplit(curr_gametime," ")[[1]][1],':')[[1]][1]
if(length(grep('H2',curr_gametime)) > 0){
time.left <- as.numeric(mins.left)
} else{
time.left <- 20 + as.numeric(mins.left)
}
} else{
mins.left <- strsplit(strsplit(curr_gametime," ")[[1]][1],':')[[1]][1]
if(mins.left == "Half"){
time.left <- 20
}
if(length(grep('Q4',curr_gametime)) > 0){
time.left <- as.numeric(mins.left)
} else{
if(length(grep('Q3',curr_gametime)) > 0){
time.left <- 12 + as.numeric(mins.left)
} else{
if(length(grep('Q2',curr_gametime)) > 0){
time.left <- 24 + as.numeric(mins.left)
} else{
if(length(grep('Q1',curr_gametime)) > 0){
time.left <- 36 + as.numeric(mins.left)
}
}
}
}
}
time.left <- as.numeric(time.left)
max.points <- max(points_df$Points,na.rm = T)
ave_line <- round(mean(game_data$Line,na.rm = T),digits = 0) + 0.5
curr_variance <- curr_line - ave_line
curr_ppm <-  round(max.points / max(which(points_df$Points == max.points)),digits = 2)
total_at_curr <- round(curr_points + curr_ppm * time.left,digits = 0)
req_rate <- round((curr_line-curr_points) / time.left,digits = 2)
}
} else{
curr_line <- "NA"
curr_points <- "NA"
curr_gametime <- "NA"
time.left <- "NA"
mins.left <- "NA"
max.points <- "NA"
curr_ppm <- "NA"
total_at_curr <- "NA"
req_rate <- "NA"
curr_variance <- "NA"
ave_line <- "NA"
}
points_df_na$GameTime <- as.character(points_df_na$GameTime)
#Then turn it back into an ordered factor
points_df_na$GameTime <- factor(points_df_na$GameTime, levels=unique(points_df_na$GameTime))
output$plot1 <- renderPlotly({
if(length(which(!is.na(points_df_na$Line))) >= 5){
p <- ggplot(data=points_df_na, aes(x = GameTime, y = Line, group=1)) +
geom_line(colour="red", size=0.5) +
geom_point(colour = "red",size = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_hline(yintercept=ave_line) +
ggplot2::annotate("text",x = nrow(points_df_na) / 2,y = max(points_df_na$Line,na.rm = T) * 1.01,label = paste0('Game Time: ',curr_gametime,'   Points: ',curr_points,'   PPM: ',curr_ppm,'   Current Line: ',curr_line,'    Average Line: ',ave_line,'    Variance: ',curr_variance),size = 5)
ggplotly(p)
} else{
dat.perc <- as.character(round(length(which(!is.na(points_df_na$Line))) / 5,digits = 2) * 100)
df <- data.frame()
ggplot(df) + geom_point() + theme_bw() + theme(panel.grid.major = element_blank()) + theme(axis.title = element_blank()) + theme(axis.text = element_blank()) + theme(axis.ticks = element_blank()) + theme(panel.border = element_blank()) + xlim(0, 10) + ylim(0, 100) + ggplot2::annotate("text",x = 5,y = 80,label = paste0(dat.perc,"% of data required for visualisation"),size = 7)
}
})
output$plot2 <- renderPlotly({
if(length(which(!is.na(points_df_na$Line))) >= 5){
p <- ggplot(data=points_df_na, aes(x = GameTime, y = PointsInMinute, group=1)) +
geom_bar(stat = "identity",colour = "red", fill = "red") +
theme(axis.ticks.x = element_blank()) +
theme_bw() +
theme(axis.title = element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
} else{
dat.perc <- as.character(round(length(which(!is.na(points_df_na$Line))) / 5,digits = 2) * 100)
df <- data.frame()
ggplot(df) + geom_point() + theme_bw() + theme(panel.grid.major = element_blank()) + theme(axis.title = element_blank()) + theme(axis.text = element_blank()) + theme(axis.ticks = element_blank()) + theme(panel.border = element_blank()) + xlim(0, 10) + ylim(0, 100) + ggplot2::annotate("text",x = 5,y = 80,label = paste0(dat.perc,"% of data required for visualisation"),size = 7)
}
})
colnames(points_df) <- c('Game Time','Points','Points in Minute','Line')
output$table <- renderTable(points_df)
output$text6 <- renderText({
paste0("Game: ",strsplit(gameid," - ")[[1]][1])
})
output$text9 <- renderText({
paste0("Minutes Left: ",time.left)
})
output$text1 <- renderText({
paste0("Line: ", curr_line)
})
output$text2 <- renderText({
paste0("Points: ", curr_points)
})
output$text3 <- renderText({
paste0("Game Time: ", curr_gametime)
})
output$text4 <- renderText({
paste0("Points Per Minute: ", curr_ppm)
})
output$text5 <- renderText({
paste0("Last Updated: ",last_up)
})
output$text7 <- renderText({
paste0("Proj Total: ",total_at_curr)
})
output$text8 <- renderText({
paste0("Req. Points Per Minute: ",req_rate)
})
})
})
})
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/RTH/Clients/Shiny-Server/Bet')
runApp('Desktop/RTH/Clients/Shiny-Server/Bet')
runApp('Desktop/RTH/Clients/Shiny-Server/Bet')
data.files
data.files <- list.files('Data/')
data.files <- gsub('\\.csv','',data_ii_df$data.files)
data.files <- list.files('Data/')
data_ii <- data.files
for(ii in 1:length(data_ii)){
data_ii[ii] <- as.Date(gsub(".csv","",strsplit(data_ii[ii],"  -  ")[[1]][2]),'%a %b %d')
}
data_ii_df <- data.frame(data.files,data_ii)
data_ii_df <- data_ii_df[order(data_ii_df$data_ii,decreasing = T),]
data.files <- gsub('\\.csv','',data_ii_df$data.files)
setwd("~/Desktop/RTH/Clients/Shiny-Server/Bet")
data.files <- list.files('Data/')
data_ii <- data.files
for(ii in 1:length(data_ii)){
data_ii[ii] <- as.Date(gsub(".csv","",strsplit(data_ii[ii],"  -  ")[[1]][2]),'%a %b %d')
}
data_ii_df <- data.frame(data.files,data_ii)
data_ii_df <- data_ii_df[order(data_ii_df$data_ii,decreasing = T),]
data.files <- gsub('\\.csv','',data_ii_df$data.files)
data.files
gameid <- data.files[1]
gameid
game_data <- read.csv(paste0('Data/',gameid,'.csv'))
game_data$GameTime <- gsub(" 1st"," Q1",game_data$GameTime)
game_data$GameTime <- gsub("\\ 2nd"," Q2",game_data$GameTime)
game_data$GameTime <- gsub(" 3rd", " Q3",game_data$GameTime)
game_data$GameTime <- gsub(" 4th"," Q4",game_data$GameTime)
game_data$GameTime <- gsub("1st ","H1 ",game_data$GameTime)
game_data$GameTime <- gsub("2nd ","H2 ",game_data$GameTime)
game_data$GameTime <- gsub('^:','0:',game_data$GameTime)
game_data$GameTime <- gsub('\\.*','',game_data$GameTime)
game_data$GameTime <- gsub('End','0:00 ',game_data$GameTime)
game_data$GameTime <- gsub('Halftime','H1 0:00',game_data$GameTime)
game_data$GameTime <- gsub('Half','0:00 Q2',game_data$GameTime)
if(nrow(game_data) != 0){
if(game_data$Type[1] == 'NCAA'){
for(jj in 1:nrow(game_data)){
g_ii <- strsplit(game_data$GameTime[jj]," ")[[1]]
if(length(g_ii) > 1){
game_data$GameTime[jj] <- paste(strsplit(game_data$GameTime[jj]," ")[[1]][2:1],collapse = " ")
}
}
}
}
if(nrow(game_data) != 0) {
if(game_data$Type[1] == 'NCAA'){
college_times <- 1:20
college_periods <- 1:2
game_times <- c()
for(jj in college_periods){
for(ii in sort(college_times,decreasing = T)){
game_times <- c(game_times,paste0('H',jj,' - ',college_times[ii],'m'))
}
}
points_df <- data.frame(game_times,NA,NA,NA,NA,NA)
colnames(points_df) <- c("GameTime","Points","PointsInMinute","Line","PPM","RPPM")
for(ii in 1:nrow(points_df)){
per <- strsplit(as.character(points_df$GameTime[ii])," - ")[[1]][1]
min <-  as.character(as.numeric(gsub("m","",strsplit(as.character(points_df$GameTime)[ii]," - ")[[1]][2]))-1)
if(length(intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))) > 0){
points_ii <- game_data$Points[intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))]
line_ii <- game_data$Line[intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))]
} else{
points_ii <- NA
line_ii <- NA
}
points_df$Points[ii] <- max(points_ii)
points_df$Line[ii] <- max(line_ii)
points_df$PPM[ii] <- points_df$Points[ii] / ii
points_df$RPPM[ii] <- (points_df$Line[ii] - points_df$Points[ii]) / (nrow(points_df) - ii)
}
points_in_minute <- c()
for(pp in 1:nrow(points_df)){
points_in_minute[pp] <- points_df$Points[pp] - points_df$Points[pp-1]
}
points_df$PointsInMinute <- points_in_minute
points_df <<- points_df
}
if(game_data$Type[1] == "NBA"){
game_times <- c()
nba_times <- 1:12
nba_periods <- 1:4
for(jj in nba_periods){
for(ii in sort(nba_times,decreasing = T)){
game_times <- c(game_times,paste0('Q',jj,' - ',nba_times[ii],'m'))
}
}
points_df <- data.frame(game_times,NA,NA,NA,NA,NA)
colnames(points_df) <- c("GameTime","Points","PointsInMinute","Line","PPM","RPPM")
for(ii in 1:nrow(points_df)){
per <- strsplit(as.character(points_df$GameTime[ii])," - ")[[1]][1]
min <-  as.character(as.numeric(gsub("m","",strsplit(as.character(points_df$GameTime)[ii]," - ")[[1]][2]))-1)
if(length(intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))) > 0){
points_ii <- game_data$Points[intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))]
line_ii <- game_data$Line[intersect(grep(per,game_data$GameTime),grep(paste0("^",min,":"),game_data$GameTime))]
} else{
points_ii <- NA
line_ii <- NA
}
points_df$Points[ii] <- max(points_ii)
points_df$Line[ii] <- max(line_ii)
points_df$PPM[ii] <- points_df$Points[ii] / ii
points_df$RPPM[ii] <- (points_df$Line[ii] - points_df$Points[ii]) / (nrow(points_df) - ii)
}
points_in_minute <- c()
for(pp in 1:nrow(points_df)){
points_in_minute[pp] <- points_df$Points[pp] - points_df$Points[pp-1]
}
points_df$PointsInMinute <- points_in_minute
}
}
if(nrow(game_data != 0)){
points_df_na <- points_df
} else{
points_df <- game_data
points_df_na <- game_data
}
if(any(is.na(game_data$Points))){
n_na <- length(which(is.na(game_data$Points)))
game_data <- game_data[-which(is.na(game_data$Points)),]
}
curr_line <- game_data$Line[nrow(game_data)]
curr_points <- game_data$Points[nrow(game_data)]
curr_gametime <- game_data$GameTime[nrow(game_data)]
if(nrow(game_data) > 0){
if((length(curr_gametime) == 0 || is.na(curr_gametime)) || (length(curr_points) == 0 || is.na(curr_points)) || (length(curr_line) ==0 || is.na(curr_gametime))){
curr_line <- "NA"
curr_points <- "NA"
curr_gametime <- "NA"
time.left <- "NA"
mins.left <- "NA"
max.points <- "NA"
curr_ppm <- "NA"
total_at_curr <- "NA"
req_rate <- "NA"
curr_variance <- "NA"
ave_line <- "NA"
} else{
if(game_data$Type[1] == 'NCAA'){
mins.left <- strsplit(strsplit(curr_gametime," ")[[1]][1],':')[[1]][1]
if(length(grep('H2',curr_gametime)) > 0){
time.left <- as.numeric(mins.left)
} else{
time.left <- 20 + as.numeric(mins.left)
}
} else{
mins.left <- strsplit(strsplit(curr_gametime," ")[[1]][1],':')[[1]][1]
if(mins.left == "Half"){
time.left <- 20
}
if(length(grep('Q4',curr_gametime)) > 0){
time.left <- as.numeric(mins.left)
} else{
if(length(grep('Q3',curr_gametime)) > 0){
time.left <- 12 + as.numeric(mins.left)
} else{
if(length(grep('Q2',curr_gametime)) > 0){
time.left <- 24 + as.numeric(mins.left)
} else{
if(length(grep('Q1',curr_gametime)) > 0){
time.left <- 36 + as.numeric(mins.left)
}
}
}
}
}
time.left <- as.numeric(time.left)
max.points <- max(points_df$Points,na.rm = T)
ave_line <- round(mean(game_data$Line,na.rm = T),digits = 0) + 0.5
curr_variance <- curr_line - ave_line
curr_ppm <-  round(max.points / max(which(points_df$Points == max.points)),digits = 2)
total_at_curr <- round(curr_points + curr_ppm * time.left,digits = 0)
req_rate <- round((curr_line-curr_points) / time.left,digits = 2)
}
} else{
curr_line <- "NA"
curr_points <- "NA"
curr_gametime <- "NA"
time.left <- "NA"
mins.left <- "NA"
max.points <- "NA"
curr_ppm <- "NA"
total_at_curr <- "NA"
req_rate <- "NA"
curr_variance <- "NA"
ave_line <- "NA"
}
points_df_na$GameTime <- as.character(points_df_na$GameTime)
#Then turn it back into an ordered factor
points_df_na$GameTime <- factor(points_df_na$GameTime, levels=unique(points_df_na$GameTime))
if(!all(is.na(points_df_na$PointsInMinute))){
if(any(points_df_na$PointsInMinute[which(!is.na(points_df_na$PointsInMinute))] < 0)){
points_df_na$PointsInMinute[which(points_df_na$PointsInMinute < 0)] <- NA
}
}
points_df_na
p <- ggplot(data=points_df_na, aes(x = GameTime, y = Line, group=1)) +
geom_line(colour="red", size=0.5) +
geom_point(colour = "red",size = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_hline(yintercept=ave_line) +
ggplot2::annotate("text",x = nrow(points_df_na) / 2,y = max(points_df_na$Line,na.rm = T) * 1.01,label = paste0('Game Time: ',curr_gametime,'   Points: ',curr_points,'   PPM: ',curr_ppm,'   Current Line: ',curr_line,'    Average Line: ',ave_line,'    Variance: ',curr_variance),size = 5)
p
if(!all(is.na(points_df_na$PointsInMinute))){
if(any(points_df_na$PointsInMinute[which(!is.na(points_df_na$PointsInMinute))] < 0)){
points_df_na$PointsInMinute[which(points_df_na$PointsInMinute < 0)] <- NA
}
}
points_df_na
length(which(!is.na(points_df_na$Line))) >= 5
p <- ggplot(data=points_df_na, aes(x = GameTime, y = Line, group=1)) +
geom_line(colour="red", size=0.5) +
geom_point(colour = "red",size = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_hline(yintercept=ave_line) +
ggplot2::annotate("text",x = nrow(points_df_na) / 2,y = max(points_df_na$Line,na.rm = T) * 1.01,label = paste0('Game Time: ',curr_gametime,'   Points: ',curr_points,'   PPM: ',curr_ppm,'   Current Line: ',curr_line,'    Average Line: ',ave_line,'    Variance: ',curr_variance),size = 5)
p
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p
p  + theme(legend.position = 'bottom')
ggplot2(p  + theme(legend.position = 'bottom'))
library(shiny)
library(rvest)
library(ggplot2)
library(plotly)
ggplot2(p  + theme(legend.position = 'bottom'))
ggplotly(p  + theme(legend.position = 'bottom'))
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
layout(legend = list(x = 10, y = 0.5))
p
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
layout(legend = list(x = 10, y = 0.5))
ggplotly(p)
plot_ly(data = points_df_na,x = GameTime,y = Line)
gameid
plot_ly(data = points_df_na,x = ~GameTime,y = ~Line)
plot_ly(data = points_df_na,x = ~GameTime,y = ~Line,type = "line")
plot_ly(data = points_df_na,x = ~GameTime,y = ~Line,type = "scatter")
plot_ly(data = points_df_na,x = ~GameTime,y = ~Line,type = "scattergl")
?plot_ly
runApp()
runApp()
runApp()
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_update(legend.position = 'bottom')
p
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_update(legend.position = 'bottom')
ggplotly(p)
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_update(legend.position = 'bottom')
ggplotly(p)
ggplotly(p + theme_update(legend.position = "bottom"))
p %>% layout(legend = list(x = 0.5, y =1))
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_update(legend.position = 'bottom')
# ggplotly(p + theme_update(legend.position = "bottom"))
p %>% layout(legend = list(x = 0.5, y =1))
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_update(legend.position = 'bottom')
# ggplotly(p + theme_update(legend.position = "bottom"))
p + theme(legend.position = 'none')
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_update(legend.position = 'bottom')
ggplotly(p + theme_update(legend.position = "bottom"))
p <- ggplot(points_df_na, aes(x= GameTime,y=PointsInMinute,group = "1")) +
geom_bar(stat = "identity",fill = '#d9dbdd',aes(colour = "Points")) +
geom_line(aes(y = PPM,colour = "PPM")) +
geom_line(aes(y = RPPM,colour = "Req. PPM")) +
scale_color_manual(values=c("Points"="#d9dbdd", "PPM"="green","Req. PPM"="blue")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(p)
